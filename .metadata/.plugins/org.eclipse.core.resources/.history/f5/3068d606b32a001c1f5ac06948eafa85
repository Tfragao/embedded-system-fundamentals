/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include<stdio.h>
#include<stdint.h>

long long int g_data = 0xFFFEABCD11112345;

int main(void)
{

#if 0
		int ch = 0xFFFF;  //2 bytes of data
		printf("Original value assigned to the variable is %d\n", ch);
		printf("Address of variable is %p\n", &ch);
		int* ptr = &ch;
		//Read operation:
		char data = *ptr; //will read 1 byte of the 2 bytes available
		printf("1 byte of data read from the address is %d\n", data);
		//write operation:
		*ptr = 65;
		printf("Value of the variable after write operation is %d\n", ch);


	char *pAddress1;
	pAddress1 = (char*)&g_data;

	short *pAddress2;
	pAddress2 = (short*)&g_data;

	int *pAddress3;
	pAddress3 = (int*)&g_data;

	printf("Size of the pointer is %d\n", sizeof(char*));
	printf("Size of the pointer is %d\n", sizeof(short*));
	printf("Size of the pointer is %d\n", sizeof(int*));
	printf("Size of the pointer is %d\n", sizeof(long long*));

	printf("Value at address %p is : %x\n", pAddress1, *pAddress1);
	printf("Value at address %p is : %x\n", pAddress2, *pAddress2);
	printf("Value at address %p is : %x\n", pAddress3, *pAddress3);

	int *pAddress = (int*)&g_data;
	printf("Value at address %p is : %x\n", pAddress, *pAddress);
	pAddress = pAddress + 5;
	printf("Value at address %p is : %x\n", pAddress, *pAddress);
#endif

	uint32_t *pAddress = (uint32_t*)0xFFFF0000;
	printf("Address is %p \n", pAddress);
	pAddress = pAddress + 1; //This is arithmetic add operation
	pAddress++;             //This is unary increment operation
	printf("Address is %p \n", pAddress);

	uint8_t val = (5 + 4 == 7) ? (9-4): 99;
	printf("%d\n", val);

	uint8_t age = 15;
	(age < 18) ? printf("You can not vote\n") : printf("You can vote\n");

	uint8_t data1 = 40;
	uint8_t data2 = 30;
	uint8_t result = data1 && data2; //Both values are non-zero, it evaluates to True(1)
	printf("%d\n", result);
	result = data1 & data2;         // bitwise And operation bit by bit
	printf("%d\n", result);

	//Testing of bits
	uint8_t data3 = 44;
	uint8_t Mask = 1;
	if((data3 & Mask))
		printf("Number %d is Odd\n", data3);
	else
		printf("Number %d is Even\n", data3);

	//Setting bits (make bit state 1)
	uint8_t Mask2 = 0b10010000;
	uint8_t set_value = (data3 | Mask2);
	printf("Value after been set is %d\n", set_value);

	//Clearing bits (reset bit 6, 5, 4 of the given data)
	uint8_t data4 = 190; //0b10111110
	uint8_t Mask3 = 112; //0b01110000
	uint8_t temp =  ~(Mask3 << 4) ;
	uintt8_t reset_val = data4 & temp;
	printf("Value reseted is %d\n", reset_val);




	for(;;);
}
